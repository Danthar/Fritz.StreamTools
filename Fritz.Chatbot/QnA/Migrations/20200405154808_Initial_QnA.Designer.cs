// <auto-generated />
using System;
using Fritz.Chatbot.QnA.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Fritz.Chatbot.QnA.Migrations
{
    [DbContext(typeof(QnADbContext))]
    [Migration("20200405154808_Initial_QnA")]
    partial class Initial_QnA
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Fritz.Chatbot.QnA.Data.AlternateQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("character varying(280)")
                        .HasMaxLength(280);

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AlternateQuestion");
                });

            modelBuilder.Entity("Fritz.Chatbot.QnA.Data.QnAPair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("character varying(280)")
                        .HasMaxLength(280);

                    b.HasKey("Id");

                    b.ToTable("QnAPairs");
                });

            modelBuilder.Entity("Fritz.Chatbot.QnA.Data.UnansweredQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AskedDateStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.ToTable("UnansweredQuestions");
                });

            modelBuilder.Entity("Fritz.Chatbot.QnA.Data.AlternateQuestion", b =>
                {
                    b.HasOne("Fritz.Chatbot.QnA.Data.QnAPair", "MainQuestion")
                        .WithMany("AlternateQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
